{"version":3,"sources":["context/todo.tsx","components/Task/styles.ts","components/Task/index.tsx","components/Card/styles.ts","components/Card/index.tsx","components/FormEnterNameTask/style.ts","components/FormEnterNameTask/index.tsx","ChallengeComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoContext","createContext","TodoProvider","children","useState","todoList","localStorage","getItem","JSON","parse","listTodo","setListTodo","addTodo","useCallback","item","a","addItem","id","uuidv4","name","columns","setItem","stringify","error","console","movingTaskBack","listTasks","taskIndex","findIndex","splice","map","updatedTask","push","movingTaskAhead","listTasksNew","taskBackIndex","updatedTaskNew","memorizeValue","useMemo","Provider","value","useTodo","useContext","Container","styled","div","Task","task","type","className","disabled","onClick","color","size","Card","list","todo","setTodo","inProgess","setInProgess","done","setDone","useEffect","todoUpdated","filter","inProgessUpdated","doneUpdated","FormEnterNameTask","setName","handleAddTask","onSubmit","placeholder","onChange","e","target","ChallengeComponent","App","style","marginLeft","display","flexDirection","alignItems","href","background","padding","borderRadius","rel","width","margin","maxHeight","border","boxSizing","boxShadow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10aaf017.chunk.js","sourcesContent":["import {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n} from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { IList, TodoContextData, TodoProps } from './interface';\n\nconst TodoContext = createContext<TodoContextData>({} as TodoContextData);\n\nexport function TodoProvider({ children }: TodoProps): JSX.Element {\n  const [listTodo, setListTodo] = useState<IList[]>(() => {\n    const todoList = localStorage.getItem('@todoList');\n    if (todoList) {\n      return JSON.parse(todoList)\n    }\n    return []\n  });\n\n  const addTodo = useCallback(async (item: string) => {\n    try {\n      const addItem = [...listTodo, {\n        id: uuidv4(),\n        name: item,\n        columns: 'TODO'\n      }];\n      setListTodo(addItem)\n      localStorage.setItem('@todoList', JSON.stringify(addItem));\n    } catch (error) {\n      console.error(error);\n    }\n  }, [listTodo]);\n\n  const movingTaskBack = useCallback((id: string) => {\n    try {\n      const listTasks = [...listTodo];\n      const taskIndex = listTasks.findIndex((item) => item.id === id);\n      if (taskIndex >= 0) {\n        listTasks.splice(taskIndex, 1);\n      }\n\n      listTodo.map(item => {\n        if (item.id === id) {\n          const updatedTask = {\n            ...item,\n            columns: item.columns === 'DONE' ? 'IN_PROGRESS' : 'TODO'\n          }\n          listTasks.push(updatedTask)\n        }\n        return null;\n      });\n\n      setListTodo(listTasks);\n      localStorage.setItem('@todoList', JSON.stringify(listTasks));\n\n    } catch (error) {\n      console.error(error);\n    }\n  }, [listTodo]);\n\n  const movingTaskAhead = useCallback((id: string) => {\n    try {\n      const listTasksNew = [...listTodo];\n      const taskBackIndex = listTasksNew.findIndex((item) => item.id === id);\n      if (taskBackIndex >= 0) {\n        listTasksNew.splice(taskBackIndex, 1);\n      }\n\n      listTodo.map(item => {\n        if (item.id === id) {\n          const updatedTaskNew = {\n            ...item,\n            columns: item.columns === 'TODO' ? 'IN_PROGRESS' : 'DONE'\n          }\n          listTasksNew.push(updatedTaskNew)\n        }\n        return null;\n      });\n\n      setListTodo(listTasksNew);\n      localStorage.setItem('@todoList', JSON.stringify(listTasksNew));\n\n    } catch (error) {\n      console.error(error);\n    }\n  }, [listTodo]);\n\n  const memorizeValue = useMemo(() => {\n    return {\n      addTodo,\n      listTodo,\n      movingTaskBack,\n      movingTaskAhead,\n    };\n  }, [\n    addTodo,\n    listTodo,\n    movingTaskBack,\n    movingTaskAhead,\n  ]);\n\n  return (\n    <TodoContext.Provider value={memorizeValue}>\n      {children}\n    </TodoContext.Provider>\n  )\n}\n\nexport function useTodo(): TodoContextData {\n  const context = useContext(TodoContext)\n  return context\n}","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: block;\n  \n  ul, li {\n    padding: 0;\n    margin: 0;\n    list-style-type: none;\n  }\n  ul {\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n    flex-direction: column;\n    padding: 0.4rem;\n  }\n\n  li {\n    width: calc(100% - 2rem);\n    max-width: 300px;\n    padding: 1rem;\n    border-radius: 4px;\n    box-shadow: rgba(0, 0, 0, 0.50) 0px 3px 8px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n  }\n\n  button {\n    border: none;\n    cursor: pointer;\n    border-radius: 4px;\n    padding: 0.2rem 0.5rem;\n    &.back {\n      background: red;\n    }\n    &.next {\n      background: green;\n    }\n    &:disabled {\n      opacity: 0.2;\n    }\n  }\n`;","import { ArrowLeft, ArrowRight } from \"phosphor-react\";\nimport { IList } from \"../../context/interface\";\nimport { useTodo } from \"../../context/todo\";\nimport * as Styles from './styles'\n;\ninterface Props {\n  task: IList[]\n}\n\nconst Task = ({ task }: Props) => {\n  const { movingTaskBack, movingTaskAhead } = useTodo();\n\n  const handleBackTask = (id: string) => {\n    movingTaskBack(id);\n  }\n\n  const handleNextTask = (id: string) => {\n    movingTaskAhead(id);\n  }\n\n  return (\n    <Styles.Container>\n      <ul>\n        {\n          task.map(item => (\n            <li key={item.id}>\n              <button\n                aria-label=\"back\"\n                type=\"button\"\n                className=\"back\"\n                disabled={item.columns === \"TODO\"}\n                onClick={() => handleBackTask(item.id)}\n              >\n              <ArrowLeft color=\"white\" size={24} />\n              </button>\n              {item.name}\n              <button\n                aria-label=\"back\"\n                type=\"button\"\n                className=\"next\"\n                disabled={item.columns === \"DONE\"}\n                onClick={() => handleNextTask(item.id)}\n              >\n              <ArrowRight color=\"white\" size={24} />\n              </button>\n            </li>\n          ))\n        }\n\n      </ul>\n    </Styles.Container>\n  )\n}\n\nexport default Task;","import styled  from \"styled-components\";\n\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n  flex-direction: column;\n  width: 100%;\n\n  @media (min-width: 980px) {\n    flex-direction: row;\n  }\n`;\n\nexport const Card = styled.div`\n  border-radius: 0.5rem;\n  padding-bottom: 2rem;\n  box-shadow: rgba(0, 0, 0, 0.50) 0px 3px 8px;\n  text-align: center;\n  flex-direction: column;\n  width: 100%;\n\n  @media (min-width: 980px) {\n    width: 33%;\n  }\n`;","import React, { useEffect, useState } from 'react';\nimport { IList } from '../../context/interface';\nimport Task from '../Task';\nimport * as Styles from './styles';\n\ninterface Props {\n  list: IList[];\n}\nconst Card = ({ list } : Props) => {\nconst [todo, setTodo] = useState<IList[]>([]);\nconst [inProgess, setInProgess] = useState<IList[]>([]);\nconst [done, setDone] = useState<IList[]>([]);\n\n  useEffect(() => {\n    const todoUpdated = list.filter(item => item.columns === \"TODO\");\n    setTodo(todoUpdated);\n  },[list])\n\n  useEffect(() => {\n    const inProgessUpdated = list.filter(item => item.columns === \"IN_PROGRESS\");\n    setInProgess(inProgessUpdated);\n  },[list])\n\n  useEffect(() => {\n    const doneUpdated = list.filter(item => item.columns === \"DONE\");\n    setDone(doneUpdated);\n  },[list])\n\n  return (\n    <Styles.Container>\n      <Styles.Card>\n        <h2>To Do</h2>\n        <Task task={todo} />\n      </Styles.Card>\n      <Styles.Card>\n        <h2>In Progress</h2>\n        <Task task={inProgess} />\n      </Styles.Card>\n      <Styles.Card>\n        <h2>Done</h2>\n        <Task task={done} />\n      </Styles.Card>\n    </Styles.Container>\n  )\n}\n\nexport default Card;","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  padding-top: 1rem;\n\n  form {\n    display: flex;\n    gap: 0.4rem;\n  }\n\n  input {\n    padding: 1rem;\n  }\n\n  button {\n    padding: 0.5rem 0.7rem;\n    background: blue;\n    border: none;\n    cursor: pointer;\n  }\n`;","import { useState } from 'react';\nimport { useTodo } from '../../context/todo';\nimport { Plus } from 'phosphor-react';\nimport * as Styles from './style';\n\nconst FormEnterNameTask = () => {\n  const [name, setName] = useState<string>(\"\");\n  const { addTodo } = useTodo();\n\n  const handleAddTask = () => {\n    if (name === \"\") return;\n    addTodo(name);\n    setName(\"\")\n  }\n\n  return (\n    <Styles.Container>\n      <form onSubmit={handleAddTask}>\n        <input placeholder='Add Task' type=\"text\" value={name} onChange={(e) => setName(e.target.value)} />\n        <button onClick={() => handleAddTask}>\n          <Plus color='white' size={24} />\n        </button>\n      </form>\n    </Styles.Container>\n  )\n}\n\nexport default FormEnterNameTask;","import React from 'react'\nimport Card from './components/Card';\nimport { useTodo } from './context/todo'\nimport FormEnterNameTask from './components/FormEnterNameTask';\n\nexport function ChallengeComponent() {\n  const { listTodo } = useTodo();\n\n  return (\n    <>\n      <Card list={listTodo} />\n      <FormEnterNameTask />\n    </>\n  )\n}\n","import React from 'react'\nimport { ChallengeComponent } from './ChallengeComponent'\nimport { TodoProvider } from './context/todo';\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div style={{ marginLeft: 25, display: 'flex', flexDirection: 'row', alignItems: 'center' }}>\n          <h1>Welcome To The Every.io Code Challenge.</h1>\n          <div style={{ marginLeft: 50 }}>\n            <a\n              target=\"_blank\"\n              href=\"https://www.figma.com/proto/kd49ArXbBt0vi1kBSLkmC1/Code-Challenge?node-id=1%3A2&scaling=min-zoom&page-id=0%3A1\"\n              style={{ color: 'white', background: 'black', padding: 8, borderRadius: 4, display: 'inline-block' }}\n              rel=\"noreferrer\">\n              Checkout the Prototype\n            </a>\n          </div>\n        </div>\n      </header>\n      <main\n        style={{\n          width: 'calc(100vw - 50px)',\n          margin: '0 auto',\n          padding: '2.5rem',\n          maxHeight: '100%',\n          background: '#fcfcfc',\n          border: '1px solid #000000',\n          boxSizing: 'border-box',\n          boxShadow: '0px 4px 4px rgba(0, 0, 0, 0.25)',\n          borderRadius: 40,\n        }}>\n        <TodoProvider>\n          <ChallengeComponent />\n        </TodoProvider>\n      </main>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}